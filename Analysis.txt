Task0.py Worst Case Big O Calculation: O(11)
Justification: The first record needs to be retrieved (+1). Then the three records
within the first record needs to be retrieved (+3), and then they are printed (+1).
Next, the second record is retrieved (+1), and the four items within that record are
retrieved (+4). Then, the records are printed (+1).

Task1.py Worst Case Big O Calculation: O(4n + 4p + 2)
Justification: The first list, texts, retrieves two items and adds each one 
for each iteration (4n). The second list, calls, retrieves two items add adds each one
for each iteration (4p). Finally, the set, unique_nums_set, is counted and printed (+2).

Task2.py Worst Case Big O Calculation: O(4n + 3)
Justification: The first for loop converts each item of time in the list, calls, to an integer (n).
Next, the second for loop using calls, either creates a new entry or adds a time to an existing 
entry in the dictionary, call_dict (n). Then, assuming the worst case scenario that every iteration of time
is greater than the previous iteration of time in the call_dict, a new number and a new time is added
to the max_list, a list with two items, the phone number, and the max time (2n). Finally, two items are
retrieved and printed from max_list (+3).

Task3.py Worst Case Big O Calculation: O(5n + nlog(n) + 8)
Justification: First, a list and a set are created (+2). Next, assuming the worst case scenario that every
caller called from an "(080)" number and each receiving number is a unique number, each receiving number is
assigned the variable x and appended to both the set and the list (3n). The list is then sorted (nlog(n)). Then,
part a is answered with a print statement (+1), and a for loop (n). Next, a counter is created (+1) and assuming
the worst, every item in the list is "080", 1 is added to the counter (n). Next, the total number of items in 
the list are counted (+1). Then the counter/the length of the list is found and multiplied by 100 (+1). Finally,
part b is answered with a print statement (+1) and the answer for part b is retrieved(+1).

Task4.py Worst Case Big O Calculation: O((n**2) + 6n + nlog(n) + 2np + 2p + 8)
Justification: In the first step, a list is created (+1) and assuming that every i[0] item is unique in the 
calls list, the number of computations is the length of the calls list (n). Second, another list is created
(+1) and assuming that every i[1] is a unique item in the calls list, the number of computations is the 
length of the calls list (n). Third, another list is created (+1) and assuming every item in og_list is not
in the receive_list, then the computational steps are the lenghts of the lists squared + the length of list
og_list (n**2 + n). Fourth, I create a new list from the texts list (+1), and assuming that the i[0] items in
texts are unique values, then the computational steps of the for loop is the length of texts list (p). Fifth,
I create another list (+1) that searches for all the items in the failed_income_call_test, which has length n,
and iterates through every item in the text_senders list, which has length p, and then appends each item from the
failed_income_call_test, which has lenght n, to the new list (np+n). Sixth, I create a new list (+1) and I iterate
through all the worst-case assumed unique values of the texts list (p). Seventh, I create a new list (+1), and in
my for loop, I iterate through every value in the failed_text_send_test, which has length n, and I iterate through
every value in text_receivers, which has length p, and I append every value from failed_text_send_test (np+n). Eighth,
I sort the final list, flagged_suspects (nlog(n)). Finally, I print a statement (+1), and I iterate and print each value
of the final list, flagged_suspects (n).

REFERENCES:
1. https://wiki.python.org/moin/TimeComplexity
